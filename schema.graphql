type History @entity {
  id: ID!
  "Disclaimer"
  disclaimer: String!
  "Total Proposal Count"
  totalProposalCount: BigInt!
  "All Proposals"
  allProposals: [Proposal!]!
  "Total Voters"
  totalVoterCount: BigInt!
  "Total Votes"
  totalVotes: BigInt!
  "Total number of voters Staked"
  totalStakers: BigInt!
  "Total Amount Staked"
  totalStakedAmount: BigInt!
  "Total Reward"
  totalReward: BigInt!
  "Paid Rewards"
  paidRewards: BigInt!
}

type Proposal @entity {
  "Integer for the Proposal ID"
  id: ID!
  "Timestamp of Proposal"
  timestamp: BigInt!
  "Blocknumber of Proposal"
  blockNumber: BigInt!
  "Metadata for proposal: for Yearn Finance this is proposal.hash"
  metadata: String!
  "The address of the proposer"
  proposer: Voter!
  # "An ordered list of target addresses for calls to be made"
  # targets: [Bytes!]!
  # "An ordered list of value that is passed to each call"
  # values: [BigInt!]!
  # "An ordered list of function signatures to be called"
  # signatures: [String!]!
  # "An ordered list of callData to be passed to the calls"
  # calldatas: [Bytes!]!
  # "The timestamp of when the proposal will be availible for execution"
  # eta: BigInt!
  "The block at which voting begins"
  startBlock: BigInt!
  "The block at which voting ends, votes must be cast prior to this block"
  endBlock: BigInt!
  "The number of votes supportive of the proposal"
  forVotes: BigInt!
  "The number of votes against the proposal"
  againstVotes: BigInt!
  "An array of Ballots cast"
  ballots: [Ballot!]!
  # "Has the vote been Canceled (Boolean)"
  # cancelled: Boolean
  # "If cancelled, executed in TX hash:"
  # cancelledTx: Bytes!
  # "Has the vote been Executed (Boolean)"
  # executed: Boolean!
  # "If executed, executed in TX hash:"
  # executionTx: Bytes!
  "Participents"
  participentCount: BigInt!
  "Is the proposal Open"
  open: Boolean!
  "Quorum"
  quorum: BigInt!
  "Quorum Required"
  quorumRequired: BigInt!
  "Total Votes Availible"
  totalVotesAvailible: BigInt!
  "Address of Executor"
  executor: Bytes!
  "Quorum reached"
  quorumReached: Boolean!
}

type Ballot @entity {
  "Transaction Hash from the Vote action"
  id: ID!
  "Timestamp of Proposal"
  timestamp: BigInt!
  "Blocknumber of Proposal"
  blockNumber: BigInt!
  "The Voter who has cast this ballot"
  voter: Voter!
  "Support: True if a yes vote, false if a no vote"
  support: Boolean!
  # "Number of Votes the voter has cast"
  # votesCast: BigInt!
  "Voters Vote Weight"
  voteWeight: BigInt!
  "Proposal for which this ballot is cast"
  proposal: Proposal!
}

type Voter @entity {
  "Address of the Voter"
  id: ID!
  "Proposals the Voter has created"
  proposalsProposed: [Proposal!]!
  "Number of Proposals the Voter has Created"
  proposalsProposedCount: BigInt!
  "Proposals Participated in."
  ballotsCast: [Ballot!]!
  "Number of Proposals the voter has voted"
  proposalsParticipatedCount: BigInt!
  "Vote Count"
  voteCount: BigInt!
  "Is Voter Registered"
  voterRegistered: Boolean!
  "Is Staked?"
  staking: Boolean!
  "Staked Amount"
  stakedAmount: BigInt!
  "Paid Rewards"
  paidReward: BigInt!
}